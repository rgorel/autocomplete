var PouchDB = require('pouchdb');
var pouchDBUpsert = require('pouchdb-upsert');
var Promise = require('promise');

PouchDB.plugin(pouchDBUpsert);

var TREE_KEY = 'tree';
var TOKEN_INDEX_KEY = 'token_index';
var UPDATED_AT_KEY = 'updated_at'
var ENTRIES_KEY = 'entries';
var DB_NAME = 'autocomplete';

var CHUNK_SIZE = 1000000;

var db = new PouchDB(DB_NAME);

module.exports.truncate = function() {
  return db.destroy()
    .then(function (){
      db = new PouchDB(DB_NAME);
    });
}

module.exports.getTree = function() {
  return getJSON(TREE_KEY);
};

module.exports.getTokenIndex = function() {
  return getJSON(TOKEN_INDEX_KEY);
};

module.exports.storeTree = function(tree) {
  return storeJSON(TREE_KEY, tree);
};

module.exports.getEntries = function() {
  return getJSON(ENTRIES_KEY);
};

module.exports.storeEntries = function(entries) {
  return storeJSON(ENTRIES_KEY, entries);
};

module.exports.storeTokenIndex = function(tokenIndex) {
  return storeJSON(TOKEN_INDEX_KEY, tokenIndex);
};

module.exports.getUpdatedAt = function() {
  return db.get(UPDATED_AT_KEY)
    .then(function(doc) {
      return new Date(doc.value).toString();
    })
    .catch(function() {
      return '';
    });
};

module.exports.setUpdatedAt = function() {
  return db.upsert(UPDATED_AT_KEY, function() {
    return { value: Date.now() };
  });
};

function storeJSON(name, object) {
  console.log('storing JSON %s', name);
  var value = JSON.stringify(object);

  return new Promise(function(fulfill, reject) {
    var chunkCount = 0;
    var lastPos = 0;

    (function iterate() {
      var chunk = value.substring(lastPos, lastPos + CHUNK_SIZE);
      console.log('chunk length %s', chunk.length);
      if (chunk.length === 0) return fulfill();
      chunkCount++;

      console.log('trying to store chunk #%s, %s symbols', chunkCount, chunk.length);

      db.upsert(name + '/' + pad(chunkCount, 4), function() {
          return { value: chunk };
        })
        .then(function() {
          console.log('wrote chunk #%s, %s symbols total', chunkCount, value.length);
          lastPos += chunk.length;
          iterate();
        })
        .catch(reject);
    })();

  }).then(function() {
    console.log('finished writing %s', name)
  })
  .catch(console.log);
}

function getJSON(name) {
  console.log('getting JSON %s', name);

  return db.allDocs({
      include_docs: true,
      startkey: name,
      endkey: name + '\uffff'
    })
    .then(function(result) {
      if (result.rows.length === 0) return {};
      console.log('%s: got %s chunks', name, result.rows.length);

      var value = result
        .rows
        .map(function(row) {
          return row.doc.value;
        })
        .join('');

      try {
        return JSON.parse(value);
      }
      catch(e) {
        console.log(e)
      }
    });
}

function pad(num, size) {
  var s = "000000000" + num;
  return s.substr(s.length - size);
}