function node(hash, character) {
  var _node = hash;
  var childrenKey = '_c';
  var isWordKey = '_w';
  var word = hash.getWord ? hash.getWord() : '';

  _node.hash && (_node = _node.hash);

  _node[childrenKey] || (_node[childrenKey] = {});
  typeof(_node[isWordKey]) == 'undefined' && setIsWord(false);


  if (character) return getChild(character);


  function getChild(character) {
    _node[childrenKey][character] || (_node[childrenKey][character] = {});
    var childNode = node(_node[childrenKey][character]);

    childNode.setWord(word + character);
    return childNode;
  }

  function eachChild(cb) {
    Object.keys(_node[childrenKey]).forEach(function(key) {
      cb(getChild(key));
    });
  }

  function setIsWord(value) {
    _node[isWordKey] = value === false ? 0 : 1;
  }



  return {
    hash: _node,
    eachChild: eachChild,
    isWord: _node[isWordKey],
    setIsWord: setIsWord,
    getWord: function() {
      return word;
    },
    setWord: function(value) {
      word = value;
    }
  };
}


module.exports = node;