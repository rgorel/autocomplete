var node = require('./node');
var Promise = require('promise');
var md5 = require('blueimp-md5');
var storage = require('./storage');
var tokenize = require('./tokenize');
var Index = require('./db-index');
var Results = require('./results');

var tree;
var dbIndex;
var entries = {};

// var TOKEN_LIMIT = 1000;

function load() {
  return Promise.all([storage.getTree(), storage.getTokenIndex(), storage.getEntries()])
    .then(function(result) {
      console.log('load results')
      tree = result[0];
      dbIndex = new Index(result[1]);
      entries = result[2];
    });
}

function save() {
  return storage.truncate()
    .then(function() {
      return storage.storeTree(tree);
    })
    .then(function() {
      return storage.storeTokenIndex(dbIndex.hash);
    })
    .then(function() {
      return storage.storeEntries(entries);
    })
    .then(storage.setUpdatedAt)
    .catch(console.log)
}

function truncate() {
  tree = {};
  dbIndex = new Index();
  entries = {};
}

function index(string) {
  var tokens = tokenize(string);
  if (!tokens) return;

  var id = md5(string);

  tokens.forEach(function(token) {
    token = token.toLowerCase();
    entries[id] = string;

    dbIndex.add(token, id)

    indexToken(token);
  });
}

function indexToken(word) {
  var currentLevel = node(tree);

  for (var i in word) {
    currentLevel = node(currentLevel, word[i]);
  }

  currentLevel.setIsWord();
}

function search(query, limit) {
  if (query === '') return [];

  var results = new Results(limit);

  tokenize(query).forEach(function(token) {
    var tokenResults = searchToken(token);
    results.add(tokenResults);
  });

  // for( var i = 0; i < 10; i++) {
  //   var item = results.getResults()[i];
  //   console.log(results.getRawResults()[item], entries[item], item)
  // }

  return results.getResults().map(function(entryId) { return entries[entryId] });
}

function searchToken(term) {
  var results = [];

  getTokens(term, function(token) {
    Array.prototype.push.apply(results, dbIndex.lookup(token));
  });

  if (typeof TOKEN_LIMIT === 'undefined')
    return results;
  else
    return results.slice(0, TOKEN_LIMIT);
}

function getTokens(term, cb) {
  term || (term = '');
  if (term == '') return [];

  term = term.toLowerCase();

  var subtree = tree;

  for (var i in term) {
    subtree = node(subtree, term[i]);
  }

  var queue = [subtree];

  while(queue.length > 0) {
    var currentNode = node(queue.shift());

    if (currentNode.isWord) cb(currentNode.getWord());

    currentNode.eachChild(function(childNode) {
      queue.push(childNode);
    });
  }
}

function isEmpty() {
  return Object.keys(tree).length == 0;
}


truncate();


module.exports = {
  load: load,
  save: save,
  index: index,
  search: search,
  isEmpty: isEmpty,
  getUpdatedAt: storage.getUpdatedAt,
  truncate: truncate
}