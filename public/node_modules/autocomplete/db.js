var storage = require('./storage');
var node = require('./node');
var tree = {};

function load() {
  tree = storage.getTree();
}

function save() {
  storage.storeTree(tree);
  storage.setUpdatedAt(new Date().toString());
}

function truncate() {
  tree = {};
}

function index(word) {
  word = word.toLowerCase();
  var currentLevel = node(tree);

  for (var i in word) {
    currentLevel = node(currentLevel, word[i]);
  }

  currentLevel.setIsWord();
}

function search(term, limit) {
  term || (term = '');
  if (term == '') return [];

  term = term.toLowerCase();

  var subtree = tree;

  for (var i in term) {
    subtree = node(subtree, term[i]);
  }

  var queue = [subtree];
  var results = [];

  while(queue.length > 0) {
    var currentNode = node(queue.shift());

    if (currentNode.isWord) results.push(currentNode.getWord());
    if (limit && results.length >= limit) break;

    currentNode.eachChild(function(childNode) {
      queue.push(childNode);
    });
  }

  return results;
}

function isEmpty() {
  return Object.keys(tree).length == 0;
}



module.exports = {
  load: load,
  save: save,
  index: index,
  search: search,
  isEmpty: isEmpty,
  getUpdatedAt: storage.getUpdatedAt,
  truncate: truncate
}